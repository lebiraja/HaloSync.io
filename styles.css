/* Import Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Roboto:wght@400;700&display=swap');

/* General Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Root Variables for Dark Color Palette */
:root {
    --primary-black: #000000;
    --primary-dark-grey: #1a1a1a;
    --secondary-grey: #2c2c2c;
    --light-grey: #cccccc;
    --accent-grey: #444444;
    --text-light: #f0f0f0;
    --text-dark: #dddddd;
    --highlight: #555555; /* For subtle highlights */
    --button-hover: #333333;
    --background-color: #121212;
    --header-height: 70px;
    --transition-speed: 0.3s;
    
    /* New Animation Variables */
    --animation-duration: 0.6s;
    --animation-delay: 0.2s;
    --animation-ease: cubic-bezier(0.25, 0.8, 0.25, 1);
}

/* Body */
body {
    font-family: 'Roboto', sans-serif;
    line-height: 1.6;
    background-color: var(--background-color);
    color: var(--text-light);
    overflow-x: hidden; /* Prevent horizontal scroll due to animations */
}

/* Container */
.container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
}

/* Header Styles */
header {
    background-color: var(--primary-black);
    color: var(--text-light);
    padding: 10px 0;
    position: sticky;
    top: 0;
    z-index: 1000;
    box-shadow: 0 2px 5px rgba(0,0,0,0.5);
    text-align: center; /* Center the header content */
    animation: slideDown 1s ease forwards;
}

.logo {
    font-family: 'Montserrat', sans-serif;
    font-size: 1.8rem;
    font-weight: 700;
    display: inline-block; /* Ensures the logo respects the centering */
    animation: fadeIn 1.5s ease forwards;
}

/* Navigation */
nav {
    display: flex;
    align-items: center;
    justify-content: center; /* Center navigation links */
    gap: 40px; /* Increased gap for better spacing */
    margin-top: 10px;
}

.nav-links {
    list-style: none;
    display: flex;
    gap: 20px;
    animation: fadeIn 1.5s ease forwards;
    animation-delay: 0.5s;
    opacity: 0;
}

.nav-links.active {
    left: 0;
}

.nav-links li a {
    color: var(--text-light);
    text-decoration: none;
    font-weight: 500;
    transition: color var(--transition-speed) ease, transform var(--transition-speed) ease;
    position: relative;
    display: inline-block;
}

.nav-links li a::after {
    content: '';
    position: absolute;
    width: 0%;
    height: 2px;
    background-color: var(--highlight);
    left: 0;
    bottom: -5px;
    transition: width var(--transition-speed) ease;
}

.nav-links li a:hover::after {
    width: 100%;
}

.nav-links li a:hover {
    color: var(--light-grey);
    animation: pulse 1s infinite;
}

.hamburger {
    display: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-light);
    animation: fadeIn 1.5s ease forwards;
    animation-delay: 1s;
    opacity: 0;
}

/* Mobile Navigation */
@media (max-width: 768px) {
    nav {
        justify-content: space-between;
    }

    .nav-links {
        position: absolute;
        top: var(--header-height);
        left: -100%;
        flex-direction: column;
        background-color: var(--primary-black);
        width: 100%;
        text-align: center;
        transition: left var(--transition-speed) ease;
        padding: 20px 0;
    }

    .nav-links.active {
        left: 0;
    }

    .hamburger {
        display: block;
    }
}

/* Hero Section */
.hero {
    background: url('HaloSync_background.jpg') center/cover no-repeat;
    color: var(--text-light);
    height: 100vh; /* Full viewport height */
    width: 100vw; /* Full viewport width */
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: relative;
    overflow: hidden;
}

.hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7); /* Dark overlay for better text readability */
}

.hero-content {
    position: relative;
    z-index: 1;
    animation: zoomIn 1.5s ease forwards;
}

.hero h1 {
    font-family: 'Montserrat', sans-serif;
    font-size: 3rem;
    margin-bottom: 20px;
    color: var(--text-light);
    animation: fadeIn 1.5s ease forwards, float 3s ease-in-out infinite;
}

.hero p {
    font-size: 1.3rem;
    margin-bottom: 30px;
    color: var(--text-light);
    animation: slideIn 2s ease forwards, fadeIn 2s ease forwards;
}

.btn {
    display: inline-block;
    padding: 12px 30px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    font-weight: 700;
    transition: background-color var(--transition-speed) ease, transform var(--transition-speed) ease;
    animation: fadeIn 1.5s ease forwards, pulse 2s infinite;
    animation-delay: 0.5s;
    opacity: 0;
}

.primary-btn {
    background-color: var(--secondary-grey);
    color: var(--text-light);
}

.primary-btn:hover {
    background-color: var(--highlight);
    transform: translateY(-3px) scale(1.05);
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideIn {
    from { transform: translateY(50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

@keyframes bounceIn {
    from { transform: scale(0.8); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
}

@keyframes fadeInLeft {
    from { opacity: 0; transform: translateX(-50px); }
    to { opacity: 1; transform: translateX(0); }
}

@keyframes fadeInRight {
    from { opacity: 0; transform: translateX(50px); }
    to { opacity: 1; transform: translateX(0); }
}

/* New Animations */
@keyframes rotateIn {
    from { transform: rotate(-200deg); opacity: 0; }
    to { transform: rotate(0deg); opacity: 1; }
}

@keyframes zoomIn {
    from { transform: scale(0.5); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
}

@keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
}

@keyframes shake {
    0%, 100% { transform: translateX(0); }
    20%, 60% { transform: translateX(-10px); }
    40%, 80% { transform: translateX(10px); }
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

@keyframes slideDown {
    from { transform: translateY(-100%); }
    to { transform: translateY(0); }
}

@keyframes glow {
    0%, 100% { box-shadow: 0 0 5px var(--highlight); }
    50% { box-shadow: 0 0 20px var(--highlight); }
}

/* Features Section */
.features-section {
    padding: 80px 20px;
    background-color: var(--secondary-grey);
    text-align: center;
    animation: fadeIn 1.5s ease forwards, staggerFadeIn 1.5s ease forwards;
}

.features-section h2 {
    font-family: 'Montserrat', sans-serif;
    font-size: 2.5rem;
    margin-bottom: 20px;
    color: var(--text-light);
    animation: fadeIn 1.5s ease forwards, rotateIn 1s ease forwards;
}

.section-desc {
    font-size: 1.2rem;
    margin-bottom: 40px;
    color: var(--text-light);
    animation: fadeIn 1.5s ease forwards, slideIn 1.5s ease forwards;
    animation-delay: 0.5s;
    opacity: 0;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
}

.info-block {
    background-color: var(--primary-dark-grey);
    padding: 30px 20px;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.7);
    transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
    position: relative;
    opacity: 0;
}

.info-block:nth-child(odd) {
    animation: fadeInLeft 1.5s ease forwards;
    animation-delay: 0.3s;
}

.info-block:nth-child(even) {
    animation: fadeInRight 1.5s ease forwards;
    animation-delay: 0.3s;
}

.info-block:hover {
    transform: translateY(-10px);
    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.9);
    animation: glow 1.5s ease infinite;
}

.feature-icon {
    font-size: 2rem;
    color: var(--light-grey);
    margin-bottom: 15px;
    animation: rotateIn 1s ease forwards;
}

/* Entertainment Section */
.entertainment-section {
    padding: 80px 20px;
    background-color: var(--primary-black);
    color: var(--text-light);
    text-align: center;
    animation: fadeIn 1.5s ease forwards, staggerZoomIn 1.5s ease forwards;
}

.entertainment-section h2 {
    font-family: 'Montserrat', sans-serif;
    font-size: 2.5rem;
    margin-bottom: 20px;
    color: var(--text-light);
    animation: fadeIn 1.5s ease forwards, rotateIn 1s ease forwards;
}

.entertainment-section p {
    font-size: 1.2rem;
    margin-bottom: 40px;
    color: var(--text-light);
    animation: fadeIn 1.5s ease forwards, slideIn 2s ease forwards;
    animation-delay: 0.5s;
    opacity: 0;
}

.entertainment-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
}

.entertainment-section .info-block {
    background-color: var(--secondary-grey);
    padding: 30px 20px;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.7);
    transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
    position: relative;
    opacity: 0;
    animation: bounceIn 1.8s ease forwards;
    animation-delay: 0.3s;
}

.entertainment-section .info-block:hover {
    transform: translateY(-10px);
    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.9);
    animation: shake 0.5s ease infinite;
}

.entertainment-section .feature-icon {
    color: var(--light-grey);
    animation: rotateIn 1s ease forwards;
}

/* Contact Section */
.contact-section {
    padding: 80px 20px;
    background-color: var(--secondary-grey);
    text-align: center;
    animation: fadeIn 1.5s ease forwards, staggerSlideIn 1.5s ease forwards;
}

.contact-section h2 {
    font-family: 'Montserrat', sans-serif;
    font-size: 2.5rem;
    margin-bottom: 20px;
    color: var(--text-light);
    animation: fadeIn 1.5s ease forwards, rotateIn 1s ease forwards;
}

.contact-section p {
    font-size: 1.2rem;
    margin-bottom: 40px;
    color: var(--text-light);
    animation: fadeIn 1.5s ease forwards, slideIn 1.5s ease forwards;
    animation-delay: 0.5s;
    opacity: 0;
}

.contact-form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    animation: fadeIn 1.5s ease forwards, staggerFadeIn 1.5s ease forwards;
    animation-delay: 0.3s;
    opacity: 0;
}

.contact-form label {
    align-self: flex-start;
    font-weight: 600;
    margin-left: 10px;
    color: var(--text-light);
}

.contact-form input,
.contact-form textarea {
    padding: 12px 15px;
    width: 100%;
    max-width: 500px;
    background-color: var(--primary-dark-grey);
    border: 1px solid var(--accent-grey);
    border-radius: 5px;
    font-size: 1rem;
    color: var(--text-light);
    transition: border var(--transition-speed) ease, background-color var(--transition-speed) ease;
    animation: fadeIn 1.5s ease forwards;
    animation-delay: 0.6s;
    opacity: 0;
}

.contact-form input::placeholder,
.contact-form textarea::placeholder {
    color: var(--accent-grey);
}

.contact-form input:focus,
.contact-form textarea:focus {
    border: 1px solid var(--highlight);
    background-color: var(--primary-black);
}

/* Submit Button */
.submit-btn {
    background-color: var(--secondary-grey);
    color: var(--text-light);
    padding: 12px 30px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 700;
    transition: background-color var(--transition-speed) ease, transform var(--transition-speed) ease;
    animation: fadeIn 1.5s ease forwards, pulse 2s infinite;
    animation-delay: 1s;
    opacity: 0;
}

.submit-btn:hover {
    background-color: var(--highlight);
    transform: translateY(-3px) scale(1.05);
}

/* Footer */
footer {
    background-color: var(--primary-black);
    color: var(--text-light);
    text-align: center;
    padding: 20px 0;
    animation: fadeIn 1.5s ease forwards, slideUp 1s ease forwards;
}

footer p {
    font-size: 1rem;
    margin-bottom: 10px;
}

.social-links a {
    margin: 0 10px;
    color: var(--text-light);
    font-size: 1.2rem;
    transition: color var(--transition-speed) ease, transform var(--transition-speed) ease;
    animation: fadeIn 1.5s ease forwards;
    animation-delay: 0.5s;
    opacity: 0;
}

.social-links a:hover {
    color: var(--light-grey);
    transform: scale(1.2);
    animation: glow 1.5s ease infinite;
}

/* Media Queries */
@media (max-width: 768px) {
    nav {
        flex-direction: column;
        gap: 10px;
        justify-content: space-between;
    }

    .features-grid,
    .entertainment-grid {
        grid-template-columns: 1fr;
    }

    .hero h1 {
        font-size: 2.5rem;
    }

    .hero p {
        font-size: 1.1rem;
    }

    .btn {
        padding: 10px 20px;
        font-size: 0.9rem;
    }

    .info-block {
        padding: 20px 15px;
    }

    .contact-form input,
    .contact-form textarea {
        padding: 10px 12px;
        font-size: 0.9rem;
    }
}

/* Visibility for Animations */
.fade-in, .slide-in, .fade-in-left, .fade-in-right, .bounce-in {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.5s ease-in-out;
}

.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Specific Animations */
.fade-in-left {
    transform: translateX(-50px);
}

.fade-in-right {
    transform: translateX(50px);
}

.bounce-in {
    transform: scale(0.8);
}

/* Additional Styles for Improved Layout */
.features-section,
.entertainment-section,
.contact-section {
    animation: fadeIn 1.5s ease forwards;
    opacity: 0;
}

.features-section.visible,
.entertainment-section.visible,
.contact-section.visible {
    opacity: 1;
}

/* Remove any crossed-out elements if present */
.crossed-out {
    display: none;
}

/* **New Keyframe Animations** */

/* Slide Down for Header */
@keyframes slideDown {
    from { transform: translateY(-100%); }
    to { transform: translateY(0); }
}

/* Rotate In */
@keyframes rotateIn {
    from { transform: rotate(-200deg); opacity: 0; }
    to { transform: rotate(0deg); opacity: 1; }
}

/* Zoom In */
@keyframes zoomIn {
    from { transform: scale(0.5); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
}

/* Float Animation for Hero Title */
@keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
}

/* Shake Animation */
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    20%, 60% { transform: translateX(-10px); }
    40%, 80% { transform: translateX(10px); }
}

/* Pulse Animation */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

/* Glow Animation */
@keyframes glow {
    0%, 100% { box-shadow: 0 0 5px var(--highlight); }
    50% { box-shadow: 0 0 20px var(--highlight); }
}

/* Staggered Fade-In for Sections */
@keyframes staggerFadeIn {
    0% { opacity: 0; transform: translateY(20px); }
    100% { opacity: 1; transform: translateY(0); }
}

/* Staggered Zoom-In */
@keyframes staggerZoomIn {
    0% { opacity: 0; transform: scale(0.8); }
    100% { opacity: 1; transform: scale(1); }
}

/* Slide Up for Footer */
@keyframes slideUp {
    from { transform: translateY(100%); }
    to { transform: translateY(0); }
}









JavaScript








// Wait for the DOM to load before executing any code
document.addEventListener("DOMContentLoaded", () => {
    // Cache DOM elements for better performance
    const navLinks = document.querySelectorAll('nav ul li a');
    const navLinksContainer = document.querySelector('.nav-links');
    const hamburger = document.querySelector('.hamburger');
    const form = document.querySelector('.contact-form');
    const animatedElements = document.querySelectorAll('.fade-in, .slide-in, .fade-in-left, .fade-in-right, .bounce-in');
    
    // Smooth Scrolling for Navigation Links
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            if (targetSection) {
                window.scrollTo({
                    top: targetSection.offsetTop - 70, // Adjusted for sticky header height
                    behavior: 'smooth'
                });
            }

            // Close the mobile menu if open
            if (navLinksContainer.classList.contains('active')) {
                navLinksContainer.classList.remove('active');
                // Animate hamburger to closed state
                hamburger.classList.remove('is-active');
            }
        });
    });

    // Hamburger Menu Toggle with Animation
    hamburger.addEventListener('click', () => {
        navLinksContainer.classList.toggle('active');
        hamburger.classList.toggle('is-active'); // Add animation class
    });

    // Form Validation with Enhanced User Feedback
    form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const nameInput = form.querySelector('#name');
        const emailInput = form.querySelector('#email');
        const messageInput = form.querySelector('#message');
        
        const name = nameInput.value.trim();
        const email = emailInput.value.trim();
        const message = messageInput.value.trim();
        
        let valid = true;
        const errorMessages = [];

        // Remove existing error messages
        const existingErrors = form.querySelectorAll('.error-message');
        existingErrors.forEach(error => error.remove());

        // Basic validation
        if (name === "") {
            errorMessages.push("Please enter your name.");
            showError(nameInput, "Name is required.");
            valid = false;
        }
        
        if (!validateEmail(email)) {
            errorMessages.push("Please enter a valid email address.");
            showError(emailInput, "Invalid email format.");
            valid = false;
        }
        
        if (message === "") {
            errorMessages.push("Please enter a message.");
            showError(messageInput, "Message cannot be empty.");
            valid = false;
        }
        
        // If form is valid, simulate a form submission success
        if (valid) {
            displaySuccessMessage("Thank you for your message! We will get back to you shortly.");
            form.reset(); // Reset form fields
        } else {
            displayErrorMessages(errorMessages);
        }
    });
    
    // Email validation function
    const validateEmail = (email) => {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(String(email).toLowerCase());
    }

    // Function to display error messages below input fields
    const showError = (inputElement, message) => {
        const error = document.createElement('div');
        error.className = 'error-message';
        error.textContent = message;
        inputElement.classList.add('input-error');
        inputElement.parentElement.appendChild(error);

        // Trigger CSS animation for error
        error.classList.add('fade-in');
    }

    // Function to display all error messages in an alert box
    const displayErrorMessages = (messages) => {
        // Alternatively, you can display these messages in a modal or a designated error section
        alert(messages.join("\n"));
    }

    // Function to display success message
    const displaySuccessMessage = (message) => {
        // Alternatively, you can display this message in a modal or a designated success section
        alert(message);
    }

    // Scroll-triggered Animations using IntersectionObserver
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px' // Adjust as needed
    };

    const observerCallback = (entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                observer.unobserve(entry.target); // Stop observing once visible
            }
        });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);
    animatedElements.forEach(el => observer.observe(el));

    // Additional JavaScript Animations

    // Animate Hamburger Menu Icon when toggled
    // CSS should define the 'is-active' class for the hamburger icon animations
    // Example CSS (to be added to your CSS file):
    /*
    .hamburger.is-active span:nth-child(1) {
        transform: rotate(45deg) translate(5px, 5px);
    }
    .hamburger.is-active span:nth-child(2) {
        opacity: 0;
    }
    .hamburger.is-active span:nth-child(3) {
        transform: rotate(-45deg) translate(5px, -5px);
    }
    */

    // Animate Elements on Hover for Interactive Feedback
    // Example: Animate buttons with JavaScript for more control
    const buttons = document.querySelectorAll('.btn, .submit-btn');

    buttons.forEach(button => {
        button.addEventListener('mouseenter', () => {
            button.classList.add('hover-animate');
        });
        button.addEventListener('mouseleave', () => {
            button.classList.remove('hover-animate');
        });
    });

    // Function to handle continuous background animations or other dynamic effects
    // Example: Parallax effect for the hero section
    const hero = document.querySelector('.hero');
    window.addEventListener('mousemove', (e) => {
        const { clientX, clientY } = e;
        const centerX = window.innerWidth / 2;
        const centerY = window.innerHeight / 2;
        const deltaX = (clientX - centerX) / centerX;
        const deltaY = (clientY - centerY) / centerY;

        hero.style.backgroundPosition = `${50 + deltaX * 5}% ${50 + deltaY * 5}%`;
    });

    // Debounce function to limit the rate at which a function can fire.
    const debounce = (func, wait = 20, immediate = true) => {
        let timeout;
        return function() {
            const context = this, args = arguments;
            const later = () => {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            const callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    };

    // Example: Animate elements on scroll with throttling
    window.addEventListener('scroll', debounce(() => {
        // Add any scroll-based animations here
        // For example, adding a class to the header on scroll
        const header = document.querySelector('header');
        if (window.scrollY > 50) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
    }, 100));
});




